# 서버 띄울 때 맨 처음 작성했던 코드인데
# 여기에 잘 보시면 8080이라는 포트번호, mongodb+srv라고 시작하는 이상한 DB접속 문자열이 존재합니다. 
# 이런 값들은 다른 개발환경이나 다른 컴퓨터로 코드를 옮긴다면 수정이 필요할 수 있습니다.

# - 다른 컴퓨터에선 8070 포트를 연다든지,
# - 나중에 DB 이사를 가서 DB접속 문자열이 바뀐다든지
# - 아니면 내가 만든 코드를 팀원과 share 해야하는데 내 아이디 비번이 적혀있으면 좀 그렇잖습니까 

# 이런 환경에 따라 가변적인 변수 데이터들을 보통 환경변수라고 부르는데 
# (멋있는 영어로 environment variable 이라고 합니다.)

# 그래서 개발자들은 미래를 생각하는 코딩을 하기 위해 환경변수를 한곳에 모아서 관리합니다. 
# .env파일이라는 곳입니다. 
# .env파일에 모든 중요 환경변수들을 다 쑤셔박아넣은 뒤에,
# server.js에 가서 ".env파일에 있는 포트숫자를 여기에 넣어주세요~" 이런 식으로 코딩합니다.
# 이 경우 server.js 파일이 털릴 경우에도 중요한 정보들은 env 파일에 있기 때문에 조그만한 보안상 이점도 있긴 있습니다. 

# [ dotenv 라이브러리 문법 ] server.js에 환경변수 사용을 위한 라이브러리 dotenv 설치 및 사용 (즉, npm install dotenv)
# [ dotenv 라이브러리 문법 ] server.js에 require('dotenv').config();

# [ dotenv 라이브러리 문법 ] server.js에서 env파일의 변수들을 불러오실 때는 process.env.변수이름 이렇게 불러올 수 있습니다.

# 형식은 var 문법으로 숫자, 문자 변수만드는거랑 똑같이 왼쪽엔 변수명, 오른쪽은 값을 넣는다고 보시면 됩니다.
# 다만 변수 이름들은 보통 대문자로 표기합니다. 
# 여기 파일에 모든 환경변수를 모아놓으면 나중에 이 파일만 수정하면 되니까 관리도 편해지고,
# 나중에 작업환경이 바뀌거나 클라우드에 올릴 때도 요것만 변경해주면 쉽게 환경셋팅이 가능해집니다. 

# 이제 나중에 환경변수 변경이 필요할 때
# 직접 server.js 코드를 뒤져서 바꾸는게 아니라 .env 파일만 손보면 되니 약간 더 편리하겠죠?
# 여러분이 나중에 AWS, Google, Naver 클라우드 등을 이용해서 서버를 발행할 때
# env파일을 똑같이 이용할 수 있습니다. 

# 구글 클라우드 서비스에 올릴 경우 env 파일을 따로 만드는게 아니라 app.yaml 파일 내에 환경변수들을 포함해야하는데
# https://cloud.google.com/appengine/docs/standard/nodejs/config/appref#environment_variables
# 이런 곳을 참고해서 똑같이 환경변수를 제작하면 되겠습니다. 
# 다만 변수만드는 문법에 등호 대신 콜론 (:)을 씁니다.

# .env 파일 만드실 때 파일명에 마침표 있는거 잊지 마시고요.

PORT = 8080
MYDBURL = 'mongodb+srv://admin:qwer1234@cluster0.k01og.mongodb.net/myFirstDatabase?retryWrites=true&w=majority'